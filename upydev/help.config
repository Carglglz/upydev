{"config": " to save upy device settings (see -p, -t, -g), so the target and password arguments wont be required any more", "put": " to upload a file to upy device (see -f, -s, -fre, -dir, -rst)", "get": " to download a file from upy device (see -f, -s, -fre, -dir)", "sync": " for a faster transfer of large files (this needs sync_tool.py in upy device) (see -f, -s and -lh)", "cmd": " to send command to upy device ; (see -c, -r, -rl); example upydev cmd -c \"led.on()\" ; upydev cmd -r \"print('Hello uPy')\"; upydev cmd -rl \"function_that_print_multiple_lines()\"; * tip simple commands can be used without quotes; but for commands with parenthesis or special characters use quoutes, for example 'dummy_func()' ; use double quotes \"\" when the command includes a string like this example \"uos.listdir('/sd')\"", "wrepl": "to enter the terminal WebREPL; CTRL-x to exit, CTRL-d to do soft reset; To see more keybinding info do CTRL-k ", "ping": " pings the target to see if it is reachable, CTRL-C to stop ", "run": " just calls import 'script', where 'script' is indicated by -f option (script must be in upydevice or in sd card indicated by -s option and the sd card must be already mounted as 'sd'); * Supports CTRL-C to stop the execution and exits nicely.", "install": " install libs to '/lib' path with upip; indicate lib with -f option", "mpyx": " to froze a module/script indicated with -f option, and save some RAM, it uses mpy-cross tool (see https//gitlab.com/alelec/mpy_cross)", "timeit": " to measure execution time of a module/script indicated with -f option. This is an implementation of https//github.com/peterhinch/micropython-samples/tree/master/timed_function", "fw": " to list or get available firmware versions, use -md option to indicate operation to list do 'upydev fw -md list -b [BOARD]' board can be 'esp32','esp8266' or 'PYBD' for example, -md list latest -b [BOARD] to see the latest firmware available. To get do 'upydev fw -md get [firmware file] or 'upydev fw -md get latest -b[BOARD]' (for list or get modes the -n option will filter the results further: e.g. -n ota); to see available serial ports do 'upydev fw -md list serial_ports'", "flash": " to flash a firmware file to the upydevice, a serial port must be indicated to flash do \"upydev flash -port [serial port] -f [firmware file]\"", "info": " for upy device system info", "id": " for upy device unique id", "upysh": " to enable the upy shell in the upy device (then do 'upydev man' to acces upysh manual info)", "reset": " to do a soft reset in upy device", "uhelp": " just calls micropython help", "umodules": " just calls micropython help('modules')", "mem_info": " for upy device RAM memory info; call it once to check actual memory, call it twice and it will free some memory", "filesize": " to get the size of file in root dir (default) or sd with '-s sd' option; if no file name indicated with -f option, prints all files", "filesys_info": " to get memory info of the file system, (total capacity, free, used), (default root dir, -s option to change)", "netinfo": " for upy device network info if station is enabled and connected to an AP", "netinfot": " same as netinfo but in table format", "netscan": " for upy device network scan", "netstat_on": " for enable STA", "netstat_off": " for disable STA", "netstat_conn": " for connect to an AP , must provide essid and password (see -wp)", "netstat": " STA state ; returns True if enabled, False if disabled", "ap_on": " for enable AP", "ap_off": " for disable AP", "apstat": " AP state ; returns True if enabled, False if disabled", "apconfig": " AP configuration of essid and password with authmode WPA/WPA2/PSK, (see -ap), needs first that the AP is enabled (do 'upydev ap_on')", "apscan": " scan devices connected to AP; returns number of devices and mac address", "i2c_config": " to configurate the i2c pins (see -i2c, defaults are SCL=22, SDA=23)", "i2c_scan": " to scan i2c devices (must config i2c pins first)", "spi_config": " to configurate the spi pins (see -spi, defaults are SCK=5,MISO=19,MOSI=18,CS=21)", "set_localtime": " to pass host localtime and set upy device rtc", "set_ntptime": " to set rtc from server, (see -utc for time zone)", "get_datetime": " to get date and time (must be set first, see above commands)", "sd_enable": " to enable/disable the LDO 3.3V regulator that powers the SD module use -po option to indicate the Pin.", "sd_init": " to initialize the sd card; (spi must be configurated first) create sd object and mounts as a filesystem, needs sdcard.py from upyutils directory", "sd_deinit": " to unmount sd card", "sd_auto": " experimental command, needs a sd module with sd detection pin and the SD_AM.py script (see more info in upydev documentation). Enable an Interrupt with the sd detection pin, so it mounts the sd when is detected, and unmount the sd card when is extracted.Sensors", "adc_config": " to config analog pin to read from (see pinout, -po and -att)", "aread": " to read from an analog pin previously configurated", "ads_init": " to initialize and configurate ADS1115 and the channel to read from (see -ads, -ch)", "ads_read": " to read from the analog pin previously configurated    (see -tm option for stream mode, and -f for logging*) * for one shot read, logging is also available with -f and -n option (for tagging) * use '-f now' for automatic 'log_mode_datetime.txt' name. * for stream mode profiling use -tm [ms] -ads test", "imu_init": " initialize IMU, use -imu option to indicate the imu library. (default option is 'lsm9ds1', see sensor requirements for more info')", "imuacc": " one shot read of the IMU lineal accelerometer (g=-9.8m/s^2), (see -tm option for stream mode, and -f for logging*) * for one shot read, logging is also available with -f and -n option (for tagging)  * use '-f now' for automatic 'log_mode_datetime.txt' name. * for stream mode profiling use -tm [ms] -imu test. ** stream mode and logging are supported in imugy and imumag also", "imuacc_sd": " log the imuacc data to the sd (must be mounted) with the file format 'log_mode_datetime.txt' (see -tm option for stream mode)", "imugy": "  one shot read of the IMU gyroscope (deg/s)", "imumag": " one shot read of the IMU magnetometer (gauss)", "dac_config": " to config analog pin to write to (use -po option)", "dac_write": " to write a value in volts (0-3.3V)", "dac_sig": " to write a signal use -sig for different options > [type] [Amp] [frequency] (type 'sin, sq'; Amp 0-1 V ; fq0-50 (above that fq loses quality)) > start  starts signal generation  > stop  stops signal  > mod [Amp] [frequency] modify the signal with the Amp and fq indicated.", "buzz_config": " to config PWM pin to drive the buzzer (use -po option)", "buzz_set_alarm": " to set an alarm at time indicated with option -at, be aware that the rtc time must be set first with set_localtime or set_ntptime", "buzz_interrupt": " to configure an interrupt with pins indicated with -po, use -md 'rev' for interrupt reverse operation", "buzz_beep": " make the buzzer beep, with options set by -opt, usage buzz_beep -opt [beep_ms] [number_of_beeps] [time_between_beeps] [fq]", "dcmotor_config": " to config PWM pins to drive a DC motor (use -po option as -po [DIR1] [DIR2])", "dcmotor_move": " to move the motor to one direction ['R'] or the opposite ['L']use -to option as -to ['R' or 'L'] [VELOCITY] (60-512)", "dcmotor_stop": " to stop the DC motor", "servo_config": " to configurate the servo pin with -po option", "servo_angle": " to move the servo an angle indicated by -opt option", "stepper_config": " to configurate the direction and step pin with -po option, *( -po [DIR_PIN] [STEP_PIN])", "stepper_move": " to move the stepper to right or left, at a velocity and a numbers of steps indicated with -to option [R or L] [velocity] [# steps] right, Lleft, velocity (1000-20000) (smaller is faster) and # steps (int), where 200 steps means a complete lap", "mqtt_config": " to set id, broker address, user and password, use with -client option as \"mqtt_config -client [ID] [BROKER ADDRESS] [USER] [PASSWORD]\"", "mqtt_conn": " to start a mqtt client and connect to broker; use mqtt_config first", "mqtt_sub": " to subscribe to a topic, use -to option as \"mqtt_sub -to [TOPIC]\"", "mqtt_pub": " to publish to a topic, use -to option as \"mqtt_pub -to [TOPIC] [PAYLOAD]\" or \"mqtt_pub -to [PAYLOAD]\" if already subscribed to a topic.", "mqtt_check": " to check for new messages of the subscribed topics.", "socli_init": " to initiate a socket client use with -server option as  \"socli_init -server [IP] [PORT] [BUFFER LENGTH]\"", "socli_conn": " to connect the socket client to a server (inidcated by IP)", "socli_send": " to send a message to the server, use -n option to indicate the message", "socli_recv": " to receive a message from the server", "socli_close": "to close the client socket", "sosrv_init": " to initiate a socket server, use with -server option as \"sosrv_init -server [PORT] [BUFFER LENGTH]\"", "sosrv_start": " to start the server, waits for a connection", "sosrv_send": " to send a message to the client, use -n option to indicate the message", "sosrv_recv": " to receive a message from the client", "sosrv_close" : "to close the server socket", "rget_json": " to make a request to API that returns a JSON response format (indicate API URL with -f option)", "rget_text": " to make a request to API that returns a text response format (indicate API URL with -f option)", "battery": " if running on battery, gets battery voltage (esp32 huzzah feather)", "pinout": " to see the pinout reference/info of a board, indicated by -b option, to request a single or a list of pins info use -po option", "specs": " to see the board specs, indicated by -b option", "pin_status": " to see pin state, to request a specific set use -po option ***", "bme_init":"initialize bme, use -bme option to indicate the weather sensor library. (default option is 'bme280', see sensor requirements for more info')", "bme_read":"to read values from bme (see -tm option for stream mode, and -f for logging*) * for one shot read, logging is also available with -f and -n option (for tagging) * use '-f now' for automatic 'log_mode_datetime.txt' name. * for stream mode profiling use -tm [ms] -bme test", "ina_init": "initialize ina, use -ina option to indicate the power sensor library.(default option is 'ina219', see sensor requirements for more info')", "ina_read" : "to read values from ina (Pot.Diff (Volts), Current(mA), Power(mW)) (see -tm option for stream mode, and -f for logging*) * for one shot read, logging is also available with -f and -n option (for tagging) * use '-f now' for automatic 'log_mode_datetime.txt' name. * for stream mode profiling use -tm [ms] -ina test", "ina_batt": "Use the sensor to profile battery usage and estimate battery life left.It will made 100 measurements during 5 seconds. Indicate battery capacity with -batt option; (in mAh)", "make_group":"to make a group of boards to send commands to. Use -f for the name of the group and -devs option to indicate a name, ip and the password of each board. To store the group settings globally use -g option", "see":"to get specific command help info indicated with -c option. To get specific info about a devices group use -G option as 'see -G [GROUP NAME]'", "srepl":"to enter the terminal serial repl using picocom, indicate port by -port option, to exit do CTRL-a, CTRL-x", "mg_group":"to manage a group of boards to send commands to. Use -G for the name of the group and -add option to add devices (indicate a name, ip and the password of each board) or -rm to remove devices (indicated by name)", "find": "to get a list of possible upy devices. Scans the local network using nmap to find devices with port 8266 (WebREPL) open. Use -n option to perform n scans (A single scan may not find all the devices)", "wlan_init": "Initiates wlan util (call this before the following commands)", "wsta_config": "Saves a 'netowrk STA' configuration json file in upydevice, use with -wp option as -wp 'ssid' 'password'", "wap_config": "Saves a 'netowrk AP' configuration json file in upydevice, use with -ap option as -ap 'ssid' 'password'", "wsta_conn": "Connects to the wlan configurated with the command wsta_config", "wap_conn": "Enables the upydevice AP configurated with the command wap_config", "kbi": "sends CTRL-C signal to stop an ongoing loop, to be able to acces repl again", "diagnose":"to make a diagnostic test of the device (sends useful to commands to get device state info), to save report to file see -rep, use -n to save the report with a custom name (automatic name is 'upyd_ID_DATETIME.txt').Use '-apmd' option if connected to esp AP.", "errlog": "if 'error.log' is present in the upydevice, this shows the content (cat('error.log')), if 'error.log' in sd use -s sd", "d_sync": "to recursively sync a folder in upydevice filesystem use -dir to indicate the folder (must be in cwd), use -tree to see dir structure, or -s sd to sync to an sd card mounted as 'sd'", "stream_test": "to test download speed (from device to host). Default test is 10 MB of random bytes are sent in chunks of 20 kB and received in chunks of 32 kB. To change test parameters use -chunk_tx , -chunk_rx, and -total_size.", "sysctl":"to start/stop a script without following the output. To follow initiate wrepl/srepl as normal, and exit with CTRL-x (webrepl) or CTRL-A,X (srepl) TO START: use -start [SCRIPT_NAME], TO STOP: use -stop [SCRIPT_NAME]", "log":"to log the output of a upydevice script, indicate script with -f option, and the sys.stdout log level and file log level with -dslev and -dflev (defaults are debug for sys.stdout and error for file). To log in background use -daemon option, then the log will be redirected to a file with level -dslev. To stop the 'daemon' log mode use -stopd and indicate script with -f option. 'Normal' file log and 'Daemon' file log are under .upydev_logs folder in HOME directory, named after the name of the script. To follow an on going 'daemon' mode log, use -follow option and indicate the script with -f option.", "update_upyutils": "to update the last versions of sync_tool.py, upylog.py and upynotify.py", "debug":"To execute a local script line by line in the target upydevice, use -f option to indicate the file. To enter next line press ENTER, to finish PRESS C then ENTER. To break a while loop do CTRL+C.", "gen_rsakey":"To generate RSA-2048 bit key that will be shared with the device (it is unique for each device) use -tfkey to send this key to the device (use only if connected directly to the AP of the device or a 'secure' wifi e.g. local/home). If not connected to a 'secure' wifi upload the key (it is stored in upydev.__path__) by USB/Serial connection.", "rf_wrkey":"To 'refresh' the WebREPL password with a new random password derivated from the RSA key previously generated. A token then is sent to the device to generate the same password from the RSA key previously uploaded. This won't leave any clues in the TCP Websocekts packages of the current WebREPL password. (Only the token will be visible; check this using wireshark) (This command-mode needs upysecrets.py)", "crypto_wrepl": "To enter the terminal CryptoWebREPL a E2EE terminal; CTRL-x to exit, CTRL-u to toggle encryption mode (enabled by default). To see more keybindings info do CTRL-k. By default resets after exit, use -rkey option to refresh the WebREPL password with a new random password, after exit.This passowrd will be stored in the working directory or in global directory with -g option. (This mode needs upysecrets.py)", "upy":"to acces crypto_wrepl in a 'ssh' style command to be used like e.g.: 'upydev upy@192.168.1.42' or if a device is stored in a global group called 'UPY_G' (this needs to be created first doing e.g. 'upydev make_group -g -f UPY_G -devs foo_device 192.168.1.42 myfoopass') the device can be accesed as 'upydev upy@foo_device' or redirect any command as e.g. 'upydev ping -@foo_device'", "sslgen_key":"(This needs openssl available in $PATH) To generate ECDSA key and a self-signed certificate to enable SSL sockets This needs a passphrase, that will be required every time the key is loaded. Use -tfkey to upload this key to the device (use only if connected directly to the AP of the device or a 'secure' wifi e.g. local/home). If not connected to a 'secure' wifi upload the key (it is stored in upydev.__path__) by USB/Serial connection.", "ssl_wrepl" : "To enter the terminal SSLWebREPL a E2EE wrepl/shell terminal (SSL sockets);  CTRL-x to exit, CTRL-u to toggle encryption mode (enabled by default) To see more keybindings info do CTRL-k. By default resets after exit, use -rkey option to refresh the WebREPL password with a new random password, after exit.This passowrd will be stored in the working directory or in global directory with -g option. (This mode needs ssl_repl.py, upysecrets.py for -rfkey) *(Use -nem option to use without encryption (for esp8266))", "ssl": "to acces ssl_wrepl in a 'ssh' style command to be used like e.g.: 'upydev ssl@192.168.1.42' or if a device is stored in a global group called 'UPY_G' (this needs to be created first doing e.g. 'upydev make_group -g -f UPY_G -devs foo_device 192.168.1.42 myfoopass'). The device can be accesed as 'upydev ssl@foo_device' or redirect any command as e.g. 'upydev ping -@foo_device'. *(For esp8266 use the option -nem (no encryption mode))", "sh_srepl": "To enter the serial terminal SHELL-REPL; CTRL-x to exit, To see more keybindings info do CTRL-k. By default resets after exit. To configurate a serial device use -t for baudrate and -p for serial port. To acces without previous configuration: 'sh_srepl -port [serial port] -b [baudrate]' (default baudrate is 115200). To acces with previous configuration: \n - 'sh_srepl' (if device configurated in current working directory) \n - 'sh_srepl -@ foo_device' (if foo_device is configurated in global group 'UPY_G')", "shr": "to acces the serial terminal SHELL-REPL in a 'ssh' style command to be used like e.g.: 'upydev shr@/dev/tty.usbmodem3370377430372' or if a device is stored in a global group called 'UPY_G' (this needs to be created first doing e.g. 'upydev make_group -g -f UPY_G -devs foo_device 115200 /dev/tty.usbmodem3370377430372') The device can be accesed as 'upydev shr@foo_device'", "wssrepl": "to enter the terminal WebSecureREPL; CTRL-x to exit, CTRL-d to do soft reset To see more keybindings info do CTRL-k. REPL over WebSecureSockets (This needs use of 'sslgen_key -tfkey', 'update_upyutils' and enable WebSecureREPL in the device 'import wss_repl;wss_repl.start(ssl=True)')", "wssl": "to access ssl_wrepl if WebSecureREPL is enabled in a 'ssh' style command to be used like e.g.: 'upydev wssl@192.168.1.42' or if a device is stored in a global group called 'UPY_G' (this needs to be created first doing e.g. 'upydev make_group -g -f UPY_G -devs foo_device 192.168.1.42 myfoopass') then the device can be accessed as 'upydev wssl@foo_device'", "set_wss": "To toggle between WebSecureREPL and WebREPL, to enable WebSecureREPL do 'set_wss', to disable 'set_wss -wss'"}
